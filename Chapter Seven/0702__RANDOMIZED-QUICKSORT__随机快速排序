#include <iostream>
#include <random>
#include <vector>

using namespace std;

inline void Exchange(int &a, int &b)
{
	int tmp = a;
	a = b;
	b = tmp;
}

int  Partition(vector<int> &A, int p, int r)
{
	int x = A[r];
	int i = p - 1;
	for (int j = p; j < r; j++)
	{
		if (A[j] <= x)
		{
			i = i + 1;
			Exchange(A[i],A[j]);
		}
	}
	Exchange(A[i + 1], A[r]);
	return i + 1;
}

int RandomizedPartition(vector<int> &A, int p, int r)
{
	std::random_device rd;
	std::default_random_engine engine(rd());
	std::uniform_int_distribution<> dis(p, r);
	int i = dis(engine);
	Exchange(A[r], A[i]);
	return Partition(A, p, r);
}

void RandomizedQuickSort(vector<int> &A, int p, int r)
{ 
	if (p < r)
	{
		int q = RandomizedPartition(A, p, r);
		RandomizedQuickSort(A, p, q - 1);
		RandomizedQuickSort(A, q + 1, r);
	}
}


int main()
{
	vector<int> nums = {7,12,3,15,8,33,29,6,13,2,13};
	RandomizedQuickSort(nums, 0, nums.size() - 1);
	for (int &val : nums)
		cout << val << ",";
	cout << endl;
	return 0;
}
