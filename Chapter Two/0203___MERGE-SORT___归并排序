#include <iostream> 
#include<vector>

using namespace std;

class Solution {
public:
	//归并排序------------------------------------------
	static void MergeSort(vector<int>& nums)
	{
		if (nums.size() == 1)
		{
			return;
		}

		//拆分数组
		int mid = nums.size() / 2;
		vector<int> left, right;

		for (int i = 0; i < mid; i++)
		{
			left.push_back(nums[i]);
		}

		for (int j = mid; j < nums.size(); ++j)
		{
			right.push_back(nums[j]);
		}
		//递归调用
		MergeSort(left);
		MergeSort(right);

		//合并数组
		int i = 0, j = 0,k = 0;
		for (; k < nums.size(); k++)
		{
			if (j >= right.size() || ((i < mid) && (left[i] <= right[j]))) //防止出现数组越界
			{
				nums[k] = left[i];
				++i;
			}
			else
			{
				nums[k] = right[j];
				++j;
			}
		}
		return;
	}
	//归并排序------------------------------------------

	//打印数组
	static void Show(vector<int>& nums)
	{
		for (int &i : nums)
		{
			cout << i << ' ';
		}
		cout << endl;
	}

};

int main()
{
	vector<int> nums = { 1,1,9,16,8,7,5,26,16,17,35,69,42,3,6,12,24,21,36 };
	Solution::Show(nums);

	Solution::MergeSort(nums);

	Solution::Show(nums);

	system("pause");
	return 0;
}
